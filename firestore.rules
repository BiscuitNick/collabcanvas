rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Shapes collection - allow CRUD operations with smart locking
    match /shapes/{shapeId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null 
        && !exists(/databases/$(database)/documents/locks/$(shapeId));
      allow update: if request.auth != null 
        && (!exists(/databases/$(database)/documents/locks/$(shapeId)) 
            || get(/databases/$(database)/documents/locks/$(shapeId)).data.lockedBy == request.auth.uid);
      allow delete: if request.auth != null 
        && (!exists(/databases/$(database)/documents/locks/$(shapeId)) 
            || get(/databases/$(database)/documents/locks/$(shapeId)).data.lockedBy == request.auth.uid);
    }
    
    // Locks collection - manage shape locks
    match /locks/{shapeId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null 
        && (!exists(/databases/$(database)/documents/locks/$(shapeId)) 
            || get(/databases/$(database)/documents/locks/$(shapeId)).data.expiresAt < request.time);
      allow update: if request.auth != null 
        && get(/databases/$(database)/documents/locks/$(shapeId)).data.lockedBy == request.auth.uid;
      allow delete: if request.auth != null 
        && get(/databases/$(database)/documents/locks/$(shapeId)).data.lockedBy == request.auth.uid;
    }
  }
}